<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ansible | massat log]]></title>
  <link href="http://massat.github.io/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://massat.github.io/"/>
  <updated>2014-07-08T23:10:05+09:00</updated>
  <id>http://massat.github.io/</id>
  <author>
    <name><![CDATA[Masato Hirai a.k.a. massat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bootstrap-my-mac]]></title>
    <link href="http://massat.github.io/blog/2014/07/08/bootstrap-my-mac/"/>
    <updated>2014-07-08T22:02:36+09:00</updated>
    <id>http://massat.github.io/blog/2014/07/08/bootstrap-my-mac</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="ja"><p>おやおや？ [pic] — <a href="https://t.co/N0BbShnkAH">https://t.co/N0BbShnkAH</a></p>&mdash; 平井雅人 (@massat) <a href="https://twitter.com/massat/statuses/470715846495444992">2014, 5月 25</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>というわけで Macbook Pro を新調して、新しい環境構築をすることとなった。</p>

<p>旧MBPはたしかMac2代目?で、2010年から使っていて、はじめは <code>port</code> とか使ってたように思うし、<code>MAMP</code> とかもつかってたかもしれない。
そのうちに <code>Homebrew</code> が現れて、へー美味しいの？なんて使い始めて、へー <code>rbenv</code> ? なんていってrubyも突っ込んで。
そのうちに、あれPATHが通ってないとかgemが動かないとか。あーなんか整理できていないなーなんて思いながらも、
基本1つのプロダクトに集中して携わっていてworkしてるのでよしとしていた感があった。</p>

<p>一方で、 <code>chef</code> だったり <code>puppet</code> だったり <code>serverspec</code> だったり。
環境をコードで記述するっていうことが普通に行われるようになった今。
新しい愛機をセットアップするにあたっては、この環境をよりcleanでポータブルなものにしようと思ってしこしこやっているのでした。</p>

<!--more-->


<p><a href="https://github.com/massat/bootstrap">massat/bootstrap</a></p>

<p>最初は <code>Brewfile</code> を書いてたんだけど、そのうち <code>Homebrew</code> で賄いきれなくなって、
<a href="http://www.ansible.com/home">ansible</a> でまとめてる。</p>

<p>macを新しく買ってきて、</p>

<p><code>sh
$ xcode-select --install
</code></p>

<p>で command line tools を入れて、</p>

<p><code>sh
$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></p>

<p>で Homebrewを入れて</p>

<p><code>sh
$ brew install ansible
</code></p>

<p><code>ansible</code> をインストール。</p>

<p><code>sh
$ git clone git@github.com:massat/bootstrap.git
$ cd bootstrap
</code></p>

<p>play-book のレポジトリを clone して、</p>

<p><code>sh
$ ansible-playbook -i inventory -K playbook.yml
</code></p>

<p>で環境ができあがる、つもり。
なんだけど、もはや自分の環境では何度も実行してるので、cleanな環境に適用できるのか自信なし。</p>

<p>2014/7/8 現在、</p>

<ul>
<li>Homebrew</li>
<li>mosh</li>
<li>the_silver_searcher</li>
<li>oh-my-zsh</li>
<li>autojump</li>
<li>peco</li>
<li>ghq</li>
<li>gh-open</li>
<li>rbenv</li>
<li>php</li>
<li>go</li>
<li>vagrant</li>
</ul>


<p>などなど。
捗るツールが入る、つもり。
自分の環境では動いてる。</p>

<p>p-r 歓迎。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible-motd-dq2]]></title>
    <link href="http://massat.github.io/blog/2014/04/01/ansible-motd-dq2/"/>
    <updated>2014-04-01T21:53:02+09:00</updated>
    <id>http://massat.github.io/blog/2014/04/01/ansible-motd-dq2</id>
    <content type="html"><![CDATA[<ul>
<li><em>2014/4/2 ansible-galaxyの推奨する仕様に修正 commit: <a href="https://github.com/massat/ansible-motd-dq2/commit/c8058f36a1c0ab61f412e684f42cc0082760627b">c8058f3</a></em></li>
</ul>


<p>ansibleでsshログインしたときにドラクエのキャラクターが表示されるplaybookを書いた。</p>

<p><a href="https://galaxy.ansible.com/list#/roles/685">ansible-motd-dq2</a></p>

<p>ネタ元は<a href="http://qiita.com/makocchi/items/5549c41526d6a6cabab1">こちら</a></p>

<!--more-->


<h2>Get started</h2>

<p>ansible-galaxy からは、</p>

<p><code>sh
$ ansible-galaxy install massat.ansible-motd-dq2
</code></p>

<p>でインストールでき、<code>massat.ansible-motd-dq2</code>のrole名で以下の感じで利用可能。</p>

<p><code>yml example.yml
- hosts: example
  roles:
  - { role: massat.ansible-motd-dq2, motd_dq2_figure: slime-beth }
</code></p>

<p><code>sh
$ ansible-playbook example.yml -i path/to/your-inventry
</code></p>

<p>また、githubからcloneするとVagrantfileが同梱してるので、<code>vagrant</code>が入っていれば手元ですぐ確認ができる。</p>

<p><code>sh
$ vagrant up
$ ansible-playbook example.yml -i example_inventry
$ ssh vagrant@127.0.0.1 -p 2222 -i ~/.vagrant.d/insecure_private_key
</code></p>

<p><img src="/images/posts/1__vagrant_vagrant-ubuntu-raring-64_____ssh_.png" alt="" /></p>

<h2>表示できるキャラクター</h2>

<ul>
<li>slime</li>
<li>slime-beth</li>
<li>metal-slime</li>
<li>bubble-slime</li>
<li>hagure-metal</li>
<li>slime-allstar</li>
<li>dq2-lorasia</li>
<li>dq2-samaltria</li>
<li>dq2-moonbrooke</li>
<li>dq2-allstar</li>
<li>dq2-allstar_half</li>
</ul>


<p>キャラクターはplaybookの外部変数<code>motd_dq2_figure</code>で指定できる。デフォルトは<code>slime</code>。</p>

<p>ローレシアの王子は</p>

<p><code>sh
$ ansible-playbook example.yml -i example_inventry --extra-vars "motd_dq2_figure=dq2-lorasia"
</code></p>

<p>で表示できる。</p>

<p><img src="/images/posts/2__vagrant_vagrant-ubuntu-raring-64_____ssh_.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansibleの手習いをvagrantにてする]]></title>
    <link href="http://massat.github.io/blog/2014/03/27/vagrant-ansible/"/>
    <updated>2014-03-27T22:49:00+09:00</updated>
    <id>http://massat.github.io/blog/2014/03/27/vagrant-ansible</id>
    <content type="html"><![CDATA[<p>ansibleがよさげなので<a href="http://docs.ansible.com/intro_getting_started.html">これ</a>みながらvagrantとつなげてみる。</p>

<!--more-->


<h2>準備</h2>

<h3>vagrant</h3>

<p><a href="http://docs.vagrantup.com/v2/getting-started/index.html">このへん</a>みて。
<code>homebrew-cask</code>と<code>brewfile</code>でいけるらしい。未来。</p>

<h3>ansible</h3>

<p><code>
➜  ~  brew install ansible
</code>
で済ませた。</p>

<h2>provisioningするホストの用意</h2>

<p>vagrantで用意する。
<code>ubuntu 13.04</code>にした。</p>

<p><code>sh
➜  ~  vagrant box add ubuntu13.04 http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box
➜  ~  mkdir -p ~/Workspace/ansible/
➜  ~  cd ~/Workspace/ansible
➜  ansible  vagrant init
</code></p>

<p>Vagrantfile の<code>config.vm.box</code>でさっきのboxを指定して</p>

<p>```ruby
  # &hellip;</p>

<p>  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = &ldquo;ubuntu13.04&rdquo;</p>

<p>  # &hellip;
```</p>

<p>手っ取り早く起動。</p>

<p>```sh
➜  ansible  vagrant up
Bringing machine &lsquo;default&rsquo; up with &lsquo;virtualbox&rsquo; provider&hellip;
==> default: Importing base box &lsquo;ubuntu13.04&rsquo;&hellip;
==> default: Matching MAC address for NAT networking&hellip;
==> default: Setting the name of the VM: ansible_default_1395929701950_33564
==> default: Clearing any previously set forwarded ports&hellip;
==> default: Clearing any previously set network interfaces&hellip;
==> default: Preparing network interfaces based on configuration&hellip;</p>

<pre><code>default: Adapter 1: nat
</code></pre>

<p>==> default: Forwarding ports&hellip;</p>

<pre><code>default: 22 =&gt; 2222 (adapter 1)
</code></pre>

<p>==> default: Booting VM&hellip;
==> default: Waiting for machine to boot. This may take a few minutes&hellip;</p>

<pre><code>default: SSH address: 127.0.0.1:2222
default: SSH username: vagrant
default: SSH auth method: private key
default: Error: Connection timeout. Retrying...
</code></pre>

<p>==> default: Machine booted and ready!
==> default: Checking for guest additions in VM&hellip;</p>

<pre><code>default: The guest additions on this VM do not match the installed version of
default: VirtualBox! In most cases this is fine, but in rare cases it can
default: prevent things such as shared folders from working properly. If you see
default: shared folder errors, please make sure the guest additions within the
default: virtual machine match the version of VirtualBox you have installed on
default: your host and reload your VM.
default:
default: Guest Additions Version: 4.2.10
default: VirtualBox Version: 4.3
</code></pre>

<p>==> default: Mounting shared folders&hellip;</p>

<pre><code>default: /vagrant =&gt; /Users/massat/Workspace/ansible
</code></pre>

<p>➜  ansible
```</p>

<h2>ansibleの設定</h2>

<p><a href="http://docs.ansible.com/intro_getting_started.html">これ</a>にしたがって進む。</p>

<h3>inventry</h3>

<p>ansibleが対象にするホストは<code>inventry</code>として指定するらしい。
詳しい書式は<a href="http://docs.ansible.com/intro_inventory.html">このへん</a>。</p>

<p>上記で起動したホストを指定する。
さっきの起動ログに</p>

<p><code>sh
default: SSH address: 127.0.0.1:2222
</code></p>

<p>とあるので</p>

<p><code>sh
➜  ansible  echo '127.0.0.1:2222' &gt; hosts
</code></p>

<p>した。</p>

<h3>ホストへssh接続</h3>

<p>このホストは</p>

<p><code>sh
➜  ansible  ssh vagrant@127.0.0.1 -p 2222 -i ~/.vagrant.d/insecure_private_key
</code></p>

<p>でssh接続できるので、</p>

<p>```sh
➜  ansible  ansible all -m ping -i hosts -u vagrant &mdash;private-key=~/.vagrant.d/insecure_private_key
127.0.0.1 | success >> {</p>

<pre><code>"changed": false,
"ping": "pong"
</code></pre>

<p>}
```</p>

<p>で接続できる。</p>

<h3>commandの実行</h3>

<p><code>-m</code>オプションは、ansibleのmoduleを指定するオプションで、デフォルトは<code>command</code>となる。
<code>command</code>で、ssh越しにコマンドを送りつけることができる。</p>

<p><code>sh
➜  ansible  ansible all -a '/bin/cat /etc/hostname'  -i hosts -u vagrant --private-key=~/.vagrant.d/insecure_private_key --sudo
127.0.0.1 | success | rc=0 &gt;&gt;
vagrant-ubuntu-raring-64
</code></p>

<p>なるほどねー。</p>
]]></content>
  </entry>
  
</feed>
