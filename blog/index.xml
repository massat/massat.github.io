<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on massat log</title>
    <link>https://massat.github.io/blog/index.xml</link>
    <description>Recent content in Blogs on massat log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 21 Mar 2016 23:21:04 +0000</lastBuildDate>
    <atom:link href="https://massat.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pythonのデフォルト引数の挙動には気をつけよう</title>
      <link>https://massat.github.io/blog/2016/03/21/be-careful-of-default-args/</link>
      <pubDate>Mon, 21 Mar 2016 23:21:04 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/03/21/be-careful-of-default-args/</guid>
      <description>&lt;p&gt;pythonのデフォルト引数の挙動は勘違いしそうで怖いので気をつけたい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ~ python
Python 2.7.11 (default, Feb  2 2016, 21:44:54)
[GCC 4.2.1 Compatible Apple LLVM 7.0.2 (clang-700.1.81)] on darwin
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; def func(arg={}):
...     return arg
...
&amp;gt;&amp;gt;&amp;gt; foo = func()
&amp;gt;&amp;gt;&amp;gt; foo[&#39;a&#39;] = &#39;foo&#39;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bar = func()
&amp;gt;&amp;gt;&amp;gt; bar[&#39;b&#39;] = &#39;bar&#39;
&amp;gt;&amp;gt;&amp;gt; print(foo)
{&#39;a&#39;: &#39;foo&#39;, &#39;b&#39;: &#39;bar&#39;}
&amp;gt;&amp;gt;&amp;gt; print(bar)
{&#39;a&#39;: &#39;foo&#39;, &#39;b&#39;: &#39;bar&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルト引数はモジュールロード時の1度だけしか評価されないために、呼び出しの間で共有されている。
なんでこんな仕様にしたんだろうな・・・。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>インサートモードで覚えたTIPS</title>
      <link>https://massat.github.io/blog/2016/03/04/vim-tips-for-insert-mode/</link>
      <pubDate>Fri, 04 Mar 2016 09:08:05 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/03/04/vim-tips-for-insert-mode/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.jp/gp/product/4048916599/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=1211&amp;amp;creativeASIN=4048916599&amp;amp;linkCode=as2&amp;amp;tag=massat02-22&#34;&gt;実践VIM&lt;/a&gt; より。&lt;/p&gt;

&lt;h2 id=&#34;インサートモードでの修正&#34;&gt;インサートモードでの修正&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Backspace&amp;gt;&lt;/code&gt; だけでなく、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-h&amp;gt;&lt;/code&gt;: 直前の1文字削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt;: 直前の1単語削除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-u&amp;gt;&lt;/code&gt;: 行頭まで削除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というアプローチもある。これはVIM固有のものではなくshell上でも使えるキーバインドだった。知らなかった。&lt;/p&gt;

&lt;h2 id=&#34;挿入ノーマルモード&#34;&gt;挿入ノーマルモード&lt;/h2&gt;

&lt;p&gt;インサートモードから&lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt;を入力することで、&lt;code&gt;挿入ノーマルモード&lt;/code&gt;という状態になる。
ノーマルモードで1コマンドだけを受けつけて、インサートモードに復帰するというもの。
紹介されている&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;C-o&amp;gt;zz&lt;/code&gt;: 画面を再描画して、現在の行を中央にする&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;は使えそう。&lt;/p&gt;

&lt;p&gt;インサートモード中に使えるコマンドをほとんど知らない。&lt;code&gt;i_CTRL_&lt;/code&gt; というプレフィックスでヘルプがひけるが非常にたくさんのことができそうである。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>リモートサーバーのvimを256色表示で使えるようにした</title>
      <link>https://massat.github.io/blog/2016/02/29/enable-256colors-for-remote-vim/</link>
      <pubDate>Mon, 29 Feb 2016 11:23:58 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/02/29/enable-256colors-for-remote-vim/</guid>
      <description>&lt;p&gt;色気を出して、colorschemeに&lt;code&gt;jellybeans&lt;/code&gt;を&lt;a href=&#34;https://github.com/massat/.vim/commit/33924c5459033557fc40e093a680f21da0ba6e4f&#34;&gt;使うようにした。&lt;/a&gt;
ローカルではいい感じにかっちょよく表示されるようになったんだけど、リモートの開発サーバー(ubuntu12.04)上だと色数が足りなくて逆に見にくくなってしまった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://emerg3nc3.wordpress.com/2012/07/28/full-256-color-support-for-vim-andor-xterm-on-ubuntu-12-04/&#34;&gt;ここ&lt;/a&gt;の通り、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t_Co=256&lt;/code&gt;を&lt;a href=&#34;https://github.com/massat/.vim/commit/413ddbd3f0290e1b072419f22b3b4bfb9fe1b8cd&#34;&gt;設定する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.zshrc&lt;/code&gt; に &lt;code&gt;export TERM=&amp;quot;xterm-256color&amp;quot;&lt;/code&gt; を設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ことで、表示が綺麗になった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gyazo.com/56e413e2f530344a77d0d0abbfe641e9&#34;&gt;&lt;img src=&#34;https://i.gyazo.com/56e413e2f530344a77d0d0abbfe641e9.png&#34; alt=&#34;https://gyazo.com/56e413e2f530344a77d0d0abbfe641e9&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim#2</title>
      <link>https://massat.github.io/blog/2016/02/19/vim-number-2/</link>
      <pubDate>Fri, 19 Feb 2016 23:08:47 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/02/19/vim-number-2/</guid>
      <description>

&lt;p&gt;進捗。&lt;/p&gt;

&lt;h1 id=&#34;vimrc-などを-github-に置く&#34;&gt;.vimrc などを github に置く&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/massat/.vim&#34;&gt;レポジトリ作った&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/massat/bootstrap/commit/15fba03162a7462a0321fd436ffc8bb505a2e332&#34;&gt;ansible で設定書いた&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;vimrc&#34;&gt;.vimrc&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/jnchito/items/5141b3b01bced9f7f48f&#34;&gt;こちら&lt;/a&gt;を参考に&lt;a href=&#34;https://github.com/massat/.vim/commit/28cb7ed55225238ed9d9e1b20cf844e2b06fa810&#34;&gt;書いた&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;neobundleの導入&#34;&gt;NeoBundleの導入&lt;/h1&gt;

&lt;p&gt;ここから、一気にモダンVimの世界に突入して&lt;a href=&#34;https://github.com/massat/.vim/compare/28cb7ed55225238ed9d9e1b20cf844e2b06fa810...master&#34;&gt;暗黒面へ堕ちていく&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&#34;パッケージの導入&#34;&gt;パッケージの導入&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;unite.vim&lt;/li&gt;
&lt;li&gt;NERTTree&lt;/li&gt;
&lt;li&gt;fugitive.vim&lt;/li&gt;
&lt;li&gt;neomru&lt;/li&gt;
&lt;li&gt;vimproc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自転車の練習からいきなり乗用車の路上教習に叩き出されて右往左往してる感じがしてる。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MySQLでテーブルが使用している容量を確認するSQL</title>
      <link>https://massat.github.io/blog/2016/02/19/mysqldeteburugashi-yong-siteirurong-liang-woque-ren-surusql/</link>
      <pubDate>Fri, 19 Feb 2016 18:22:49 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/02/19/mysqldeteburugashi-yong-siteirurong-liang-woque-ren-surusql/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/sho-yamasaki/20120405/1333640589&#34;&gt;データベースとテーブルのサイズを確認する方法 - ふってもハレても&lt;/a&gt; より。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;use databaseName;
select
table_name, engine, table_rows as tbl_rows, avg_row_length as rlen,
floor((data_length+index_length)/1024/1024) as allMB,  #総容量
floor((data_length)/1024/1024) as dMB,  #データ容量
floor((index_length)/1024/1024) as iMB   #インデックス容量
from information_schema.tables
where table_schema=database()
order by (data_length+index_length) desc;

+------------------------------+--------+----------+------+-------+------+------+
| table_name                | engine     | tbl_rows  | rlen | allMB | dMB | iMB |
+------------------------------+--------+----------+------+-------+------+------+
| table1                 | MyISAM   |   156382     | 3738 |   570 |  557 |   12 |
| table2                 | MyISAM   |   185280     | 1624 |   311 |  287 |   24 |
| table3                 | MyISAM   |   208823     |  394  |   103 |   78  |   24 |
+------------------------------+--------+----------+------+-------+------+------+
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>bzip2したSQLからリストアするコマンド</title>
      <link>https://massat.github.io/blog/2016/02/19/bzip2sitasqlkararisutoasurukomando/</link>
      <pubDate>Fri, 19 Feb 2016 18:14:25 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/02/19/bzip2sitasqlkararisutoasurukomando/</guid>
      <description>&lt;p&gt;&lt;code&gt;mysqldump&lt;/code&gt; したデータを &lt;code&gt;bzip2&lt;/code&gt; で固めたアーカイブからリストアするコマンドメモ&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bunzip2 &amp;lt; ./dump.sql.bz2 | mysql -u user -p database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という感じ。仕事では間で &lt;code&gt;sed&lt;/code&gt; かましたりしてるので実際には&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ bunzip2 &amp;lt; ./dump.sql.bz2 | sed -f path/to/sed |  mysql -u user -p database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいにやっている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vim入門#1</title>
      <link>https://massat.github.io/blog/2016/02/17/vim-number-1/</link>
      <pubDate>Wed, 17 Feb 2016 09:48:51 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2016/02/17/vim-number-1/</guid>
      <description>

&lt;p&gt;Vimを勉強してみる。
これまで、サーバー上のファイルを編集するためなどに素のVimを使っていたりはしたが、アプリケーションのコードを書くためのツールとしてみることにする。&lt;/p&gt;

&lt;p&gt;ちなみにアプリケーションを書くためのエディタの遍歴としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新卒で入った会社でJavaを&lt;code&gt;eclipse&lt;/code&gt;で書く&lt;/li&gt;
&lt;li&gt;PHPを各会社を作る。PHPを&lt;code&gt;eclipse+PDT&lt;/code&gt;で書く&lt;/li&gt;
&lt;li&gt;Perlを書くために&lt;code&gt;emacs&lt;/code&gt;を使い始める&lt;/li&gt;
&lt;li&gt;面倒見るのが面倒になって&lt;code&gt;SublimeText&lt;/code&gt;に乗り換え&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と言った感じ。&lt;/p&gt;

&lt;h2 id=&#34;なぜvimを始めるのか&#34;&gt;なぜVimを始めるのか&lt;/h2&gt;

&lt;p&gt;これまで、Mac上でコードを書いていたのだけど、
リモートのコードを触ることが増えていきそうだから。&lt;/p&gt;

&lt;h2 id=&#34;なぜemacsじゃないのか&#34;&gt;なぜEmacsじゃないのか&lt;/h2&gt;

&lt;p&gt;気分。&lt;/p&gt;

&lt;h2 id=&#34;目標とか&#34;&gt;目標とか&lt;/h2&gt;

&lt;p&gt;まずは、Macの上でVimを使いこなせるようになる。
ただ、リモートでの作業もできるようにすることが趣旨の一つではあるので、その辺のポータビリティも考えないといけない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.vim&lt;/code&gt;を持っていく+α&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;くらいで環境を再現できるくらいに止めないといけない。&lt;/p&gt;

&lt;h2 id=&#34;1日目にやったこと&#34;&gt;1日目にやったこと&lt;/h2&gt;

&lt;h3 id=&#34;vimのインストール&#34;&gt;Vimのインストール&lt;/h3&gt;

&lt;p&gt;素で入ってるVimよりもバージョンが進んでるようだったのでHomebrewのVimを入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  vim --version
VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Oct 27 2015 16:22:14)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  brew info vim
vim: stable 7.4.1301, HEAD
Vi &amp;quot;workalike&amp;quot; with many additional features
http://www.vim.org/
Conflicts with: ex-vi
/usr/local/Cellar/vim/7.4.1301 (1,623 files, 24.8M) *
  Built from source with: --override-system-vi --with-lua --with-luajit
From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/vim.rb
==&amp;gt; Dependencies
Optional: lua ✘, luajit ✘
==&amp;gt; Options
--disable-nls
	Build vim without National Language Support (translated messages, keymaps)
--override-system-vi
	Override system vi
--with-client-server
	Enable client/server mode
--with-lua
	Build vim with lua support
--with-luajit
	Build with luajit support
--with-mzscheme
	Build vim with mzscheme support
--with-python3
	Build vim with python3 instead of python[2] support
--with-tcl
	Build vim with tcl support
--without-perl
	Build vim without perl support
--without-python
	Build vim without python support
--without-ruby
	Build vim without ruby support
--HEAD
	Install HEAD version
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;システムのviを置き換えること&lt;/li&gt;
&lt;li&gt;仕入れた情報によれば、NeoCompleteを使うのであれluaが必要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ということだったので&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--override-system-vi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--with-lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--with-luajit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使って&lt;a href=&#34;https://github.com/massat/bootstrap/commit/b95900d50a51bcd441487acd8f249a5e5f111283&#34;&gt;インストールするようにした&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;vimtutor-をやった&#34;&gt;vimtutor をやった&lt;/h3&gt;

&lt;p&gt;いろいろ学びがありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; で行頭移動&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; で行末移動&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;知らなかった。&lt;/p&gt;

&lt;h3 id=&#34;本をポチった&#34;&gt;本をポチった&lt;/h3&gt;

&lt;iframe src=&#34;http://rcm-fe.amazon-adsystem.com/e/cm?t=genteitimesne-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=4048916599&amp;ref=qf_sp_asin_til&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr&#34; style=&#34;width:120px;height:240px;&#34; scrolling=&#34;no&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;社内slackに-vim-チャネルを作った&#34;&gt;社内Slackに #vim チャネルを作った&lt;/h3&gt;

&lt;p&gt;社内にVimmerがいます。&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;かっちょいいテーマにしたい&lt;/li&gt;
&lt;li&gt;ファイル名のいい感じの検索ができるようにしたい&lt;/li&gt;
&lt;li&gt;アプリケーションコードのいい感じの補完、シンボルへのジャンプなどができるようにしたい&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>kamakura.go #1 を開催しました。</title>
      <link>https://massat.github.io/blog/2015/03/03/kamakurago-vol1/</link>
      <pubDate>Tue, 03 Mar 2015 00:06:43 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2015/03/03/kamakurago-vol1/</guid>
      <description>&lt;p&gt;2015/02/28（土）に &lt;a href=&#34;http://kamakura-go.connpass.com/event/11080/&#34;&gt;kamakura.go #1&lt;/a&gt;を開催しました。
ぶっちゃけてはゆくゆく会社の宣伝になれば、というオモイもありつつですが、
一番はGoをはじめていくにあたって、身近にコミュニティがあったほうが何かと楽しいしプラスしかないし最高だろうってところです。&lt;/p&gt;

&lt;p&gt;自分がしっかり集中してGoを書く時間をとりたかったので、いわゆるもくもく会の形式でやってみました。
楽しかったです。参加いただいた皆様、本当にありがとうございました！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;様子&#34;&gt;様子&lt;/h2&gt;

&lt;h3 id=&#34;もくもく中&#34;&gt;もくもく中&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashtag/kamakurago?src=hash&#34;&gt;#kamakurago&lt;/a&gt; &lt;a href=&#34;http://t.co/QDK3VrDgmw&#34;&gt;pic.twitter.com/QDK3VrDgmw&lt;/a&gt;&lt;/p&gt;&amp;mdash; 平井雅人 (@massat) &lt;a href=&#34;https://twitter.com/massat/status/571573142075781120&#34;&gt;2015, 2月 28&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&#34;発表&#34;&gt;発表&lt;/h3&gt;

&lt;p&gt;自分のもの。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a91704ea4cd7427aaadc4781ab823bf4&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;参加者の皆様のものも&lt;a href=&#34;http://kamakura-go.connpass.com/event/11080/presentation/&#34;&gt;こちら&lt;/a&gt;にあがっています。&lt;/p&gt;

&lt;h3 id=&#34;懇親会&#34;&gt;懇親会&lt;/h3&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;これが &lt;a href=&#34;https://twitter.com/hashtag/kamakurago?src=hash&#34;&gt;#kamakurago&lt;/a&gt; だ &lt;a href=&#34;http://t.co/VdXbOZxVfs&#34;&gt;pic.twitter.com/VdXbOZxVfs&lt;/a&gt;&lt;/p&gt;&amp;mdash; 平井雅人 (@massat) &lt;a href=&#34;https://twitter.com/massat/status/571627840094932993&#34;&gt;2015, 2月 28&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;ふりかえって&#34;&gt;ふりかえって&lt;/h2&gt;

&lt;h3 id=&#34;よかったところ&#34;&gt;よかったところ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;初回から10名規模で開催できて、大きなトラブルもなかった&lt;/li&gt;
&lt;li&gt;もくもく会ってそんなに盛んでもないのか、&lt;strong&gt;新鮮だった&lt;/strong&gt; という声が多く概ね好評だったという印象&lt;/li&gt;
&lt;li&gt;予定になかった発表準備時間を設けたら、多くの人が発表をしてくれた&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;反省点&#34;&gt;反省点&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;もくもくし過ぎて、参加者同士のコミュニケーションが殆ど無かった

&lt;ul&gt;
&lt;li&gt;懇親会で、チャット用意してもいいかもねという声があった&lt;/li&gt;
&lt;li&gt;暫定的に会社のSlackに、チャネル作って運用開始してみている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;懇親会での話題がほぼ ingress だった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;これからも月１回程度の頻度で開催できたらと思っているので、3月末にやろうかなー。&lt;/li&gt;
&lt;li&gt;社内Slackの#kamakurago チャネルに興味ある人は、自分宛てに twitter / facebook あたりで声をかけてくれれば invite します。&lt;/li&gt;
&lt;li&gt;あらためて。ご参加頂いたみなさま、ありがとうございました！&lt;/li&gt;
&lt;li&gt;あ、&lt;a href=&#34;http://www.iichi.com/company/jobs&#34;&gt;We are Hiring!&lt;/a&gt;です〜&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>bootstrap-my-mac</title>
      <link>https://massat.github.io/blog/2014/07/08/bootstrap-my-mac/</link>
      <pubDate>Tue, 08 Jul 2014 22:02:36 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2014/07/08/bootstrap-my-mac/</guid>
      <description>&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;p&gt;おやおや？ [pic] — &lt;a href=&#34;https://t.co/N0BbShnkAH&#34;&gt;https://t.co/N0BbShnkAH&lt;/a&gt;&lt;/p&gt;&amp;mdash; 平井雅人 (@massat) &lt;a href=&#34;https://twitter.com/massat/statuses/470715846495444992&#34;&gt;2014, 5月 25&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;というわけで Macbook Pro を新調して、新しい環境構築をすることとなった。&lt;/p&gt;

&lt;p&gt;旧MBPはたしかMac2代目?で、2010年から使っていて、はじめは &lt;code&gt;port&lt;/code&gt; とか使ってたように思うし、&lt;code&gt;MAMP&lt;/code&gt; とかもつかってたかもしれない。
そのうちに &lt;code&gt;Homebrew&lt;/code&gt; が現れて、へー美味しいの？なんて使い始めて、へー &lt;code&gt;rbenv&lt;/code&gt; ? なんていってrubyも突っ込んで。
そのうちに、あれPATHが通ってないとかgemが動かないとか。あーなんか整理できていないなーなんて思いながらも、
基本1つのプロダクトに集中して携わっていてworkしてるのでよしとしていた感があった。&lt;/p&gt;

&lt;p&gt;一方で、 &lt;code&gt;chef&lt;/code&gt; だったり &lt;code&gt;puppet&lt;/code&gt; だったり &lt;code&gt;serverspec&lt;/code&gt; だったり。
環境をコードで記述するっていうことが普通に行われるようになった今。
新しい愛機をセットアップするにあたっては、この環境をよりcleanでポータブルなものにしようと思ってしこしこやっているのでした。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/massat/bootstrap&#34;&gt;massat/bootstrap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最初は &lt;code&gt;Brewfile&lt;/code&gt; を書いてたんだけど、そのうち &lt;code&gt;Homebrew&lt;/code&gt; で賄いきれなくなって、
&lt;a href=&#34;http://www.ansible.com/home&#34;&gt;ansible&lt;/a&gt; でまとめてる。&lt;/p&gt;

&lt;p&gt;macを新しく買ってきて、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ xcode-select --install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で command line tools を入れて、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で Homebrewを入れて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ansible&lt;/code&gt; をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone git@github.com:massat/bootstrap.git
$ cd bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;play-book のレポジトリを clone して、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ansible-playbook -i inventory -K playbook.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で環境ができあがる、つもり。
なんだけど、もはや自分の環境では何度も実行してるので、cleanな環境に適用できるのか自信なし。&lt;/p&gt;

&lt;p&gt;2014/7/8 現在、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Homebrew&lt;/li&gt;
&lt;li&gt;mosh&lt;/li&gt;
&lt;li&gt;the_silver_searcher&lt;/li&gt;
&lt;li&gt;oh-my-zsh&lt;/li&gt;
&lt;li&gt;autojump&lt;/li&gt;
&lt;li&gt;peco&lt;/li&gt;
&lt;li&gt;ghq&lt;/li&gt;
&lt;li&gt;gh-open&lt;/li&gt;
&lt;li&gt;rbenv&lt;/li&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;li&gt;vagrant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど。
捗るツールが入る、つもり。
自分の環境では動いてる。&lt;/p&gt;

&lt;p&gt;p-r 歓迎。&lt;/p&gt;

&lt;p&gt;(7/9追記)&lt;/p&gt;

&lt;p&gt;homebrew-cask で以下のも入れてる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alfred&lt;/li&gt;
&lt;li&gt;coteditor&lt;/li&gt;
&lt;li&gt;evernote&lt;/li&gt;
&lt;li&gt;google-chrome&lt;/li&gt;
&lt;li&gt;google-japanese-ime&lt;/li&gt;
&lt;li&gt;hipchat&lt;/li&gt;
&lt;li&gt;hoster&lt;/li&gt;
&lt;li&gt;iterm2&lt;/li&gt;
&lt;li&gt;libreoffice&lt;/li&gt;
&lt;li&gt;mysqlworkbench&lt;/li&gt;
&lt;li&gt;skype&lt;/li&gt;
&lt;li&gt;slack&lt;/li&gt;
&lt;li&gt;sophos-anti-virus-home-edition&lt;/li&gt;
&lt;li&gt;sublime-text&lt;/li&gt;
&lt;li&gt;virtualbox&lt;/li&gt;
&lt;li&gt;yorufukurou&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>ansible-motd-dq2</title>
      <link>https://massat.github.io/blog/2014/04/01/ansible-motd-dq2/</link>
      <pubDate>Tue, 01 Apr 2014 21:53:02 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2014/04/01/ansible-motd-dq2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;2014/4/2 ansible-galaxyの推奨する仕様に修正 commit: &lt;a href=&#34;https://github.com/massat/ansible-motd-dq2/commit/c8058f36a1c0ab61f412e684f42cc0082760627b&#34;&gt;c8058f3&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ansibleでsshログインしたときにドラクエのキャラクターが表示されるplaybookを書いた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://galaxy.ansible.com/list#/roles/685&#34;&gt;ansible-motd-dq2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ネタ元は&lt;a href=&#34;http://qiita.com/makocchi/items/5549c41526d6a6cabab1&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;get-started&#34;&gt;Get started&lt;/h2&gt;

&lt;p&gt;ansible-galaxy からは、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ansible-galaxy install massat.ansible-motd-dq2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインストールでき、&lt;code&gt;massat.ansible-motd-dq2&lt;/code&gt;のrole名で以下の感じで利用可能。&lt;/p&gt;

&lt;p&gt;```yml example.yml
- hosts: example
  roles:
  - { role: massat.ansible-motd-dq2, motd_dq2_figure: slime-beth }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
```sh
$ ansible-playbook example.yml -i path/to/your-inventry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、githubからcloneするとVagrantfileが同梱してるので、&lt;code&gt;vagrant&lt;/code&gt;が入っていれば手元ですぐ確認ができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vagrant up
$ ansible-playbook example.yml -i example_inventry
$ ssh vagrant@127.0.0.1 -p 2222 -i ~/.vagrant.d/insecure_private_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://massat.github.io/images/posts/1__vagrant_vagrant-ubuntu-raring-64_____ssh_.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;表示できるキャラクター&#34;&gt;表示できるキャラクター&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;slime&lt;/li&gt;
&lt;li&gt;slime-beth&lt;/li&gt;
&lt;li&gt;metal-slime&lt;/li&gt;
&lt;li&gt;bubble-slime&lt;/li&gt;
&lt;li&gt;hagure-metal&lt;/li&gt;
&lt;li&gt;slime-allstar&lt;/li&gt;
&lt;li&gt;dq2-lorasia&lt;/li&gt;
&lt;li&gt;dq2-samaltria&lt;/li&gt;
&lt;li&gt;dq2-moonbrooke&lt;/li&gt;
&lt;li&gt;dq2-allstar&lt;/li&gt;
&lt;li&gt;dq2-allstar_half&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;キャラクターはplaybookの外部変数&lt;code&gt;motd_dq2_figure&lt;/code&gt;で指定できる。デフォルトは&lt;code&gt;slime&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;ローレシアの王子は&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ansible-playbook example.yml -i example_inventry --extra-vars &amp;quot;motd_dq2_figure=dq2-lorasia&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で表示できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://massat.github.io/images/posts/2__vagrant_vagrant-ubuntu-raring-64_____ssh_.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ansibleの手習いをvagrantにてする</title>
      <link>https://massat.github.io/blog/2014/03/27/vagrant-ansible/</link>
      <pubDate>Thu, 27 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2014/03/27/vagrant-ansible/</guid>
      <description>&lt;p&gt;ansibleがよさげなので&lt;a href=&#34;http://docs.ansible.com/intro_getting_started.html&#34;&gt;これ&lt;/a&gt;みながらvagrantとつなげてみる。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;vagrant&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.vagrantup.com/v2/getting-started/index.html&#34;&gt;このへん&lt;/a&gt;みて。
&lt;code&gt;homebrew-cask&lt;/code&gt;と&lt;code&gt;brewfile&lt;/code&gt;でいけるらしい。未来。&lt;/p&gt;

&lt;h3 id=&#34;ansible&#34;&gt;ansible&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;➜  ~  brew install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で済ませた。&lt;/p&gt;

&lt;h2 id=&#34;provisioningするホストの用意&#34;&gt;provisioningするホストの用意&lt;/h2&gt;

&lt;p&gt;vagrantで用意する。
&lt;code&gt;ubuntu 13.04&lt;/code&gt;にした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ~  vagrant box add ubuntu13.04 http://cloud-images.ubuntu.com/vagrant/raring/current/raring-server-cloudimg-amd64-vagrant-disk1.box
➜  ~  mkdir -p ~/Workspace/ansible/
➜  ~  cd ~/Workspace/ansible
➜  ansible  vagrant init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrantfile の&lt;code&gt;config.vm.box&lt;/code&gt;でさっきのboxを指定して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  # ...

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = &amp;quot;ubuntu13.04&amp;quot;

  # ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;手っ取り早く起動。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ansible  vagrant up
Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; default: Importing base box &#39;ubuntu13.04&#39;...
==&amp;gt; default: Matching MAC address for NAT networking...
==&amp;gt; default: Setting the name of the VM: ansible_default_1395929701950_33564
==&amp;gt; default: Clearing any previously set forwarded ports...
==&amp;gt; default: Clearing any previously set network interfaces...
==&amp;gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==&amp;gt; default: Forwarding ports...
    default: 22 =&amp;gt; 2222 (adapter 1)
==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Error: Connection timeout. Retrying...
==&amp;gt; default: Machine booted and ready!
==&amp;gt; default: Checking for guest additions in VM...
    default: The guest additions on this VM do not match the installed version of
    default: VirtualBox! In most cases this is fine, but in rare cases it can
    default: prevent things such as shared folders from working properly. If you see
    default: shared folder errors, please make sure the guest additions within the
    default: virtual machine match the version of VirtualBox you have installed on
    default: your host and reload your VM.
    default:
    default: Guest Additions Version: 4.2.10
    default: VirtualBox Version: 4.3
==&amp;gt; default: Mounting shared folders...
    default: /vagrant =&amp;gt; /Users/massat/Workspace/ansible
➜  ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ansibleの設定&#34;&gt;ansibleの設定&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.ansible.com/intro_getting_started.html&#34;&gt;これ&lt;/a&gt;にしたがって進む。&lt;/p&gt;

&lt;h3 id=&#34;inventry&#34;&gt;inventry&lt;/h3&gt;

&lt;p&gt;ansibleが対象にするホストは&lt;code&gt;inventry&lt;/code&gt;として指定するらしい。
詳しい書式は&lt;a href=&#34;http://docs.ansible.com/intro_inventory.html&#34;&gt;このへん&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;上記で起動したホストを指定する。
さっきの起動ログに&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;default: SSH address: 127.0.0.1:2222
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とあるので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ansible  echo &#39;127.0.0.1:2222&#39; &amp;gt; hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;した。&lt;/p&gt;

&lt;h3 id=&#34;ホストへssh接続&#34;&gt;ホストへssh接続&lt;/h3&gt;

&lt;p&gt;このホストは&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ansible  ssh vagrant@127.0.0.1 -p 2222 -i ~/.vagrant.d/insecure_private_key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でssh接続できるので、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ansible  ansible all -m ping -i hosts -u vagrant --private-key=~/.vagrant.d/insecure_private_key
127.0.0.1 | success &amp;gt;&amp;gt; {
    &amp;quot;changed&amp;quot;: false,
    &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で接続できる。&lt;/p&gt;

&lt;h3 id=&#34;commandの実行&#34;&gt;commandの実行&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;オプションは、ansibleのmoduleを指定するオプションで、デフォルトは&lt;code&gt;command&lt;/code&gt;となる。
&lt;code&gt;command&lt;/code&gt;で、ssh越しにコマンドを送りつけることができる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;➜  ansible  ansible all -a &#39;/bin/cat /etc/hostname&#39;  -i hosts -u vagrant --private-key=~/.vagrant.d/insecure_private_key --sudo
127.0.0.1 | success | rc=0 &amp;gt;&amp;gt;
vagrant-ubuntu-raring-64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なるほどねー。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amazon AMIにmroongaをインストールする</title>
      <link>https://massat.github.io/blog/2013/08/20/install-mroonga-on-amazon-linux-ami/</link>
      <pubDate>Tue, 20 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2013/08/20/install-mroonga-on-amazon-linux-ami/</guid>
      <description>&lt;p&gt;EC2上にmroongaによって全文検索可能なDBを構築した。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;環境&#34;&gt;環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;amzn-ami-pv-2013.03.1.x86_64-ebs (ami-39b23d38)&lt;/li&gt;
&lt;li&gt;mysql5.6.13&lt;/li&gt;
&lt;li&gt;groonga3.06&lt;/li&gt;
&lt;li&gt;mroonga3.06&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;mysqlはオフィシャルで配布してるrpmパッケージから。
groonga、mroongaはソースからビルドしてインストールした。&lt;/p&gt;

&lt;h1 id=&#34;準備&#34;&gt;準備&lt;/h1&gt;

&lt;h3 id=&#34;checkinstall&#34;&gt;checkinstall&lt;/h3&gt;

&lt;p&gt;ソースからビルドするものについても、checkinstallでrpm化してインストールする。
64bit版のAMIにcheckinstallをインストールする手順は&lt;a href=&#34;http://massat.jp/blog/2013/02/16/install-checkinstall-on-amazon-ami-64bit/&#34;&gt;こちら&lt;/a&gt;を参照&lt;/p&gt;

&lt;h1 id=&#34;mysqlのインストール&#34;&gt;MySQLのインストール&lt;/h1&gt;

&lt;p&gt;オフィシャルで配布されている Linux Generic な rpm をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~ # rpm -ivh http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-shared-compat-5.6.13-1.linux_glibc2.5.x86_64.rpm/from/http://cdn.mysql.com/
~ # rpm -ivh http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-server-5.6.13-1.linux_glibc2.5.x86_64.rpm/from/http://cdn.mysql.com/
~ # rpm -ivh http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-devel-5.6.13-1.linux_glibc2.5.x86_64.rpm/from/http://cdn.mysql.com/
~ # rpm -ivh http://dev.mysql.com/get/Downloads/MySQL-5.6/MySQL-client-5.6.13-1.linux_glibc2.5.x86_64.rpm/from/http://cdn.mysql.com/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デフォルトの&lt;code&gt;my.cnf&lt;/code&gt;の場所が&lt;code&gt;/usr/my.cnf&lt;/code&gt;になったみたい。
あと、mysql5.6からはデフォルトの&lt;code&gt;sql_mode&lt;/code&gt;が変わって&lt;a href=&#34;https://www.google.co.jp/search?q=mysql+5.6+sql_mode&#34;&gt;よくエラーになるらしいので注意&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;mecabのインストール&#34;&gt;MeCabのインストール&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~ # yum install mecab mecab-devel mecab-ipadic
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;groongaのインストール&#34;&gt;groongaのインストール&lt;/h1&gt;

&lt;h3 id=&#34;ビルドに必要なライブラリ&#34;&gt;ビルドに必要なライブラリ&lt;/h3&gt;

&lt;p&gt;要らないものもあるかも&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~ # yum install gcc-c++ make automake libtool
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インストール&#34;&gt;インストール&lt;/h3&gt;

&lt;p&gt;だいたいは&lt;a href=&#34;http://groonga.org/ja/docs/install/centos.html#build-from-source&#34;&gt;ここ&lt;/a&gt;の手順に従った。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~ # cd /usr/local/src/
src # wget http://packages.groonga.org/source/groonga/groonga-3.0.6.tar.gz
src # tar xzf groonga-3.0.6.tar.gz
src # cd groonga-3.0.6
groonga-3.0.6 # ./configure
groonga-3.0.6 # make -j$(grep &#39;^processor&#39; /proc/cpuinfo | wc -l)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んで、&lt;code&gt;make install&lt;/code&gt; ではなくて &lt;code&gt;checkinstall&lt;/code&gt; でrpmにする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;groonga-3.0.6 # checkinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だけどコケる。
checkinstallがmake中に、どうやら必要なディレクトリが作れていない。
試行錯誤の末、以下のディレクトリを作ればビルドできる（と思う）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;groonga-3.0.6 # mkdir -p /usr/local/include/groonga/groonga
groonga-3.0.6 # mkdir -p /usr/local/lib/groonga/plugins/tokenizers
groonga-3.0.6 # mkdir -p /usr/local/lib/groonga/plugins/suggest
groonga-3.0.6 # mkdir -p /usr/local/lib/groonga/plugins/table
groonga-3.0.6 # mkdir -p /usr/local/lib/groonga/plugins/query_expanders
groonga-3.0.6 # mkdir -p /usr/local/etc/groonga
groonga-3.0.6 # mkdir -p /usr/local/var/run/groonga
groonga-3.0.6 # mkdir -p /usr/local/var/log/groonga/httpd
groonga-3.0.6 # mkdir -p /usr/local/share/groonga/examples/dictionary/edict
groonga-3.0.6 # mkdir -p /usr/local/share/groonga/examples/dictionary/html/css/smoothness/images
groonga-3.0.6 # mkdir -p /usr/local/share/groonga/images/logo
groonga-3.0.6 # mkdir -p /usr/local/share/doc/groonga/en/html/reference/command
groonga-3.0.6 # mkdir -p /usr/local/share/doc/groonga/en/html/_sources/contribution/development
groonga-3.0.6 # mkdir -p /usr/local/share/doc/groonga/en/html/_sources/reference/api
groonga-3.0.6 # mkdir -p /usr/local/share/doc/groonga/en/html/server/http
groonga-3.0.6 # mkdir -p /usr/local/share/doc/groonga/en/html/_sources/server/http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その上で、checkinstallでrpmを作ってインストール&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;groonga-3.0.6 # checkinstall
groonga-3.0.6 # rpm -ivh /root/rpmbuild/RPMS/x86_64/groonga-3.0.6-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mroongaのインストール&#34;&gt;mroongaのインストール&lt;/h3&gt;

&lt;p&gt;手順はほぼ&lt;a href=&#34;http://mroonga.org/ja/docs/install.html#install-from-the-source-code&#34;&gt;こちら&lt;/a&gt;の通り&lt;/p&gt;

&lt;p&gt;まずはMySQLのソースコードがmroongaのビルドに必要なので落としてくる。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;src # wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.13.tar.gz/from/http://cdn.mysql.com/
src # tar xzf mysql-5.6.13.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mroongaのソースコードを取得後、ビルドしてインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;src # wget http://packages.groonga.org/source/mroonga/mroonga-3.06.tar.gz
src # tar xzf mroonga-3.06.tar.gz
src # cd mroonga-3.06
mroonga-3.06 # ./configure PKG_CONFIG_PATH=/usr/local/lib/pkgconfig  --with-mysql-source=/usr/local/src/mysql-5.6.13 --with-mysql-config=/usr/bin/mysql_config
mroonga-3.06 # make
mroonga-3.06 # checkinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;んが、groongaの時と同様に、ディレクトリが作れずこける。
ので、手対応。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mroonga-3.06 # mkdir -p &#39;/usr/local/share/doc/mroonga/en/html/_sources/dev
mroonga-3.06 # mkdir -p &#39;/usr/local/share/doc/mroonga/source/reference&#39;
mroonga-3.06 # checkinstall
mroonga-3.06 # rpm -ivh /root/rpmbuild/RPMS/x86_64/mroonga-3.06-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL起動後、mroongaをプラグインとしてインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql&amp;gt; INSTALL PLUGIN mroonga SONAME &#39;ha_mroonga.so&#39;;
Query OK, 0 rows affected (0.30 sec)

mysql&amp;gt; CREATE FUNCTION last_insert_grn_id RETURNS INTEGER SONAME &#39;ha_mroonga.so&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; CREATE FUNCTION mroonga_snippet RETURNS STRING SONAME &#39;ha_mroonga.so&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; CREATE FUNCTION mroonga_command RETURNS STRING SONAME &#39;ha_mroonga.so&#39;;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; show engines;
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |
| mroonga            | YES     | CJK-ready fulltext search, column store                        | NO           | NO   | NO         |
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
10 rows in set (0.02 sec)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>64bit版Amazon AMIにcheckinstallをインストールする</title>
      <link>https://massat.github.io/blog/2013/02/16/install-checkinstall-on-amazon-ami-64bit/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2013/02/16/install-checkinstall-on-amazon-ami-64bit/</guid>
      <description>&lt;p&gt;64bit環境でのcheckinstallのインストール手順をすぐ忘れるのでメモ&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h1 id=&#34;準備&#34;&gt;準備&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# yum -y install git make gettext gcc rpm-build
# cd /usr/local/src/
# git clone http://checkinstall.izto.org/checkinstall.git
# cd checkinstall/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;64bit向けにpatchをあてる&#34;&gt;64bit向けにpatchをあてる&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/massat/4967004&#34;&gt;これらのpatch&lt;/a&gt;をあてる&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# curl https://gist.github.com/massat/4967004/raw/0a485150b270cb9e9397d1040963a627a86436e2/Makefile.patch | patch -u Makefile
# curl https://gist.github.com/massat/4967004/raw/2e447f2a7519337ca8d15a80e0bad31871b39eb7/checkinstallrc-dist.patch | patch -u checkinstallrc-dist
# curl https://gist.github.com/massat/4967004/raw/bb87f7ee31d0758e5cec9c8d430215739428ecc1/installwatch+Makefile.patch | patch -u installwatch/Makefile
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;checkinstallをrpm化&#34;&gt;checkinstallをRPM化&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# mkdir -p ~/rpmbuild/SOURCES
# make
# make install
# checkinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いくつか質問される。パッケージを選ぶ質問には&amp;rdquo;R&amp;rdquo;(rpm)を入力。その他はReturnのみでOK。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;**********************************************************************

 Done. The new package has been saved to

 /root/rpmbuild/RPMS/x86_64/checkinstall-20130216-1.x86_64.rpm
 You can install it in your system anytime using:

       rpm -i checkinstall-20130216-1.x86_64.rpm

**********************************************************************

# rpm -ivh /root/rpmbuild/RPMS/x86_64/checkinstall-20130216-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールを確認&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# rpm -qi checkinstall
Name        : checkinstall                 Relocations: (not relocatable)
Version     : 20130216                          Vendor: (none)
Release     : 1                             Build Date: Sat 16 Feb 2013 02:13:02 PM UTC
Install Date: Sat 16 Feb 2013 02:18:34 PM UTC      Build Host: ip-10-152-103-196.ap-northeast-1.compute.internal
Group       : Applications/System           Source RPM: checkinstall-20130216-1.src.rpm
Size        : 453850                           License: GPL
Signature   : (none)
Packager    : checkinstall-1.6.3
Summary     : CheckInstall installations tracker, version 1.6.2
Description :
CheckInstall installations tracker, version 1.6.2

CheckInstall  keeps  track of all the files created  or
modified  by your installation  script  (&amp;quot;make install&amp;quot;
&amp;quot;make install_modules&amp;quot;,  &amp;quot;setup&amp;quot;,   etc),   builds    a
standard   binary   package and  installs  it  in  your
system giving you the ability to uninstall it with your
distribution&#39;s  standard package management  utilities.
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Mountain Lion にPHP開発環境をつくった</title>
      <link>https://massat.github.io/blog/2012/11/24/setup-php-on-mountain-lion/</link>
      <pubDate>Sat, 24 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2012/11/24/setup-php-on-mountain-lion/</guid>
      <description>&lt;p&gt;クリーンインストールしてからのPHP環境構築ログ。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;ログインシェルをzshにしたりとかemacsいれたりとかいろいろやったけど、
PHP環境に関係ある話としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/downloads/index.action&#34;&gt;Command Line Tools for Xcode&lt;/a&gt; をインストール&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;Homebrew&lt;/a&gt; をインストール&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;くらい。&lt;/p&gt;

&lt;h2 id=&#34;パッケージインストール&#34;&gt;パッケージインストール&lt;/h2&gt;

&lt;p&gt;レポジトリ追加して&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew tap homebrew/dupes
$ brew tap josegonzalez/php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;開発で使うあたりをつらつら追加&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install make
$ brew install httpd mysql memcached mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install php53 --with-mysql
$ brew install php53-memcache php53-mongo php53-redis
$ brew install phpsh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定-起動&#34;&gt;設定&amp;amp;起動&lt;/h2&gt;

&lt;p&gt;phpの設定ファイルは &lt;code&gt;/usr/local/etc/php/&lt;/code&gt; あたり、
apacheの設定ファイルは &lt;code&gt;/usr/local/etc/apache2/&lt;/code&gt; あたりにあるのでVirtualHostをよしなに設定する。&lt;/p&gt;

&lt;p&gt;apacheは &lt;code&gt;/usr/local/sbin/apachectl&lt;/code&gt; あたり、
mysqlは &lt;code&gt;/usr/local/bin/mysql.server&lt;/code&gt; あたりで起動する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>古いログファイルをarchiveしとくスクリプト</title>
      <link>https://massat.github.io/blog/2012/11/21/a-script-compressing-old-logs/</link>
      <pubDate>Wed, 21 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://massat.github.io/blog/2012/11/21/a-script-compressing-old-logs/</guid>
      <description>&lt;p&gt;書いたのではっとく&lt;/p&gt;

&lt;p&gt;{% gist 4122658 %}&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>